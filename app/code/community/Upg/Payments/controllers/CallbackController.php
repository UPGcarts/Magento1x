<?php

use Upg\Library\Callback\Exception\MacValidation;

class Upg_Payments_CallbackController extends Mage_Core_Controller_Front_Action
{


    /**
     * @var Upg_Payments_Helper_Data
     */
    protected $helper;

    public function preDispatch()
    {
        parent::preDispatch(); // TODO: Change the autogenerated stub

        $this->helper = Mage::helper('upg_payments');

        return $this;
    }


    /**
     * Handle reserve callbacks
     */
    public function handleAction()
    {
        $this->getResponse()->setHeader('Content-type', 'application/json');
        $config = $this->helper->getConfig();

        $keys = array(
            'notificationType',
            'merchantID',
            'storeID',
            'orderID',
            'paymentMethod',
            'resultCode',
            'merchantReference',
            'additionalInformation',
            'paymentInstrumentID',
            'paymentInstrumentsPageUrl',
            'message',
            'salt',
            'mac'
        );

        $data = array();

        foreach ($keys as $K)
        {
            $data[$K] = $this->getRequest()->getParam($K, '');
        }

        $processor = Mage::getModel('upg_payments/callback');

        try
        {
            $handler = new \Upg\Library\Callback\Handler($config, $data, $processor);
            $result = $handler->run();
            $this->getResponse()->setBody($result);
        }
        catch (MacValidation $e)
        {
            Mage::logException($e);
            $this->helper->log('HMac Validation failed ' . $data['orderID'] . ' ' . $e->getMessage());
            $this->getResponse()->setBody(json_encode(array('url' => Mage::getUrl('paymentmodule/callback/error'))));
        }
        catch (Exception $e)
        {
            Mage::logException($e);
            $this->helper->log('Critical error ' . $data['orderID'] . ' ' . $e->getMessage());
            $this->getResponse()->setBody(json_encode(array('url' => Mage::getUrl('paymentmodule/callback/error'))));
        }
    }


    public function errorAction()
    {
        $this->getResponse()
            ->setHeader('Content-type', 'application/json')
            ->setBody(json_encode(array(
                'error' => 'Failure...'
            )));
    }


    public function successAction()
    {
        $this->getResponse()
            ->setHeader('Content-type', 'application/json')
            ->setBody(json_encode(array(
                'error' => 'Success!'
            )));
    }
}